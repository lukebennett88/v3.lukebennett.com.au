---
import ThemeSelect from '~/components/theme-select.astro';
---

<div class="flex flex-1 justify-end gap-4">
	<theme-select>
		<ThemeSelect
			icon="laptop"
			label="Theme"
			value="auto"
			options={[
				{ label: 'Dark', selected: false, value: 'dark' },
				{ label: 'Light', selected: false, value: 'light' },
				{ label: 'Auto', selected: true, value: 'auto' },
			]}
		/>
	</theme-select>

	{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
	<script is:inline>
		ThemeProvider.updatePickers();
	</script>

	<script>
		type Theme = 'auto' | 'dark' | 'light';

		class ThemeSelect extends HTMLElement {
			/** Key in `localStorage` to store color theme preference at. */
			#key = 'theme';

			constructor() {
				super();
				this.#onThemeChange(this.#loadTheme());
				const select = this.querySelector('select');
				if (select) {
					select.addEventListener('change', (e) => {
						if (e.currentTarget instanceof HTMLSelectElement) {
							this.#onThemeChange(this.#parseTheme(e.currentTarget.value));
						}
					});
				}
			}

			/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
			#parseTheme(theme: unknown): Theme {
				if (theme === 'auto' || theme === 'dark' || theme === 'light') {
					return theme;
				} else {
					return 'auto';
				}
			}

			/** Get the preferred system color scheme. */
			#getPreferredColorScheme(): Theme {
				return matchMedia('(prefers-color-scheme: light)').matches
					? 'light'
					: 'dark';
			}

			/** Update select menu UI, document theme, and local storage state. */
			#onThemeChange(theme: Theme): void {
				ThemeProvider.updatePickers(theme);
				document.documentElement.dataset.theme =
					theme === 'auto' ? this.#getPreferredColorScheme() : theme;
				this.#storeTheme(theme);
			}

			/** Store the user’s preference in `localStorage`. */
			#storeTheme(theme: Theme): void {
				if (typeof localStorage !== 'undefined') {
					if (theme === 'light' || theme === 'dark') {
						localStorage.setItem(this.#key, theme);
					} else {
						localStorage.removeItem(this.#key);
					}
				}
			}

			/** Load the user’s preference from `localStorage`. */
			#loadTheme(): Theme {
				const theme =
					typeof localStorage !== 'undefined' &&
					localStorage.getItem(this.#key);
				return this.#parseTheme(theme);
			}
		}

		customElements.define('theme-select', ThemeSelect);
	</script>
</div>
